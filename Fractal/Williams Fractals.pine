//@version=5
indicator("Williams Fractals", shorttitle="Fractals", format=format.price, precision=0, overlay=true)
// Define "n" as the number of periods and keep a minimum value of 2 for error handling.
n = input.int(title="Periods", defval=2, minval=2)
GP2 = "Panel"
showDisplay = input(true,"Show Display Pane", group = GP2)
string  i_tableYpos = input.string("top", "Display position", inline = "11", options = ["top", "middle", "bottom"], group = GP2)
string  i_tableXpos = input.string("right", "", inline = "11", options = ["left", "center", "right"], group = GP2)
GP3 = "tickets"
symbol1 = ticker.new("NSE", "NIFTY", syminfo.session)
symbol2 = ticker.new("NSE", "BANKNIFTY", syminfo.session)
res = input.timeframe(title="Resolution",defval="60", group=GP3)

upFractal_func() =>
    // UpFractal
    bool rslt = false
    bool upflagDownFrontier = true
    bool upflagUpFrontier0 = true
    bool upflagUpFrontier1 = true
    bool upflagUpFrontier2 = true
    bool upflagUpFrontier3 = true
    bool upflagUpFrontier4 = true



    for i = 1 to n
        upflagDownFrontier := upflagDownFrontier and (high[n-i] < high[n])
        upflagUpFrontier0 := upflagUpFrontier0 and (high[n+i] < high[n])
        upflagUpFrontier1 := upflagUpFrontier1 and (high[n+1] <= high[n] and high[n+i + 1] < high[n])
        upflagUpFrontier2 := upflagUpFrontier2 and (high[n+1] <= high[n] and high[n+2] <= high[n] and high[n+i + 2] < high[n])
        upflagUpFrontier3 := upflagUpFrontier3 and (high[n+1] <= high[n] and high[n+2] <= high[n] and high[n+3] <= high[n] and high[n+i + 3] < high[n])
        upflagUpFrontier4 := upflagUpFrontier4 and (high[n+1] <= high[n] and high[n+2] <= high[n] and high[n+3] <= high[n] and high[n+4] <= high[n] and high[n+i + 4] < high[n])
    flagUpFrontier = upflagUpFrontier0 or upflagUpFrontier1 or upflagUpFrontier2 or upflagUpFrontier3 or upflagUpFrontier4
    rslt := (upflagDownFrontier and flagUpFrontier)
upFractal = upFractal_func()

downFractal_func()=>
    // downFractal
    bool rslt = false
    bool downflagDownFrontier = true
    bool downflagUpFrontier0 = true
    bool downflagUpFrontier1 = true
    bool downflagUpFrontier2 = true
    bool downflagUpFrontier3 = true
    bool downflagUpFrontier4 = true
    
    for i = 1 to n
        downflagDownFrontier := downflagDownFrontier and (low[n-i] > low[n])
        downflagUpFrontier0 := downflagUpFrontier0 and (low[n+i] > low[n])
        downflagUpFrontier1 := downflagUpFrontier1 and (low[n+1] >= low[n] and low[n+i + 1] > low[n])
        downflagUpFrontier2 := downflagUpFrontier2 and (low[n+1] >= low[n] and low[n+2] >= low[n] and low[n+i + 2] > low[n])
        downflagUpFrontier3 := downflagUpFrontier3 and (low[n+1] >= low[n] and low[n+2] >= low[n] and low[n+3] >= low[n] and low[n+i + 3] > low[n])
        downflagUpFrontier4 := downflagUpFrontier4 and (low[n+1] >= low[n] and low[n+2] >= low[n] and low[n+3] >= low[n] and low[n+4] >= low[n] and low[n+i + 4] > low[n])
    flagDownFrontier = downflagUpFrontier0 or downflagUpFrontier1 or downflagUpFrontier2 or downflagUpFrontier3 or downflagUpFrontier4
    rslt := (downflagDownFrontier and flagDownFrontier)
downFractal = downFractal_func()

plotshape(downFractal, style=shape.triangledown, location=location.belowbar, offset=-n, color=#F44336, size = size.tiny)
plotshape(upFractal, style=shape.triangleup,   location=location.abovebar, offset=-n, color=#009688, size = size.tiny)


nifty_up = request.security(symbol1, res, expression = upFractal_func())
nifty_down = request.security(symbol1, res, expression = downFractal_func())

bn_up = request.security(symbol2, res, expression = upFractal_func())
bn_down = request.security(symbol2, res, expression = downFractal_func())

high_nifty = request.security(symbol1, res, expression=high[n])
low_nifty = request.security(symbol1, res, expression=low[n])
high_bn = request.security(symbol2, res, expression=high[n])
low_bn = request.security(symbol2, res, expression=low[n])

var close_nifty = 0.0
var close_bn = 0.0
close_nifty := request.security(symbol1, res, expression=close)
close_bn := request.security(symbol2, res, expression=close)
//timeLeft = (time_close - timenow) / 1000
time_close_nifty = request.security(symbol1, res, expression=time_close)
timenow_nifty = request.security(symbol1, res, expression=timenow)
time_close_bn = request.security(symbol2, res, expression=time_close)
timenow_bn = request.security(symbol2, res, expression=timenow)

var max_ = 0.0
var min_ = 0.0
if upFractal
    max_ := high[n]
if downFractal
    min_ := low[n]

var max_nifty_up = 0.0
var min_nifty_down = 0.0
if nifty_up
    max_nifty_up := high_nifty
if nifty_down
    min_nifty_down := low_nifty
    
var max_bn_up = 0.0
var min_bn_down = 0.0
if bn_up
    max_bn_up := high_bn
if bn_down
    min_bn_down := low_bn
    
var trigger_nifty = ''
var trigger_bn = ''
timeLeft_nifty = (time_close_nifty - timenow_nifty) / 1000
timeLeft_bn = (time_close_bn - timenow_bn) / 1000

if close_nifty[1] > max_nifty_up 
    trigger_nifty := 'BUY'
    alert('BUY NIFTY', alert.freq_once_per_bar)
else
    if close_nifty[1] < min_nifty_down 
        trigger_nifty := 'SELL'
        alert('SELL NIFTY', alert.freq_once_per_bar)
    else
        trigger_nifty := 'NA'
if close_bn[1] > max_bn_up 
    trigger_bn := 'BUY'
    alert('BUY BANCKNIFTY', alert.freq_once_per_bar)
else
    if close_bn[1] < min_bn_down 
        trigger_bn := 'SELL'
        alert('SELL BANCKNIFTY', alert.freq_once_per_bar)
    else
        trigger_bn := 'NA'

var label l = na
l := label.new(bar_index, high, text = str.tostring(upFractal) + ' y '+ str.tostring(downFractal) + str.tostring(max_) + ' ' + str.tostring(min_), color= color.blue)
label.delete(l[1])
var table panel = table.new(i_tableYpos + "_" + i_tableXpos, 4, 30, border_width = 1)
if showDisplay
    table.cell(panel, 0, 0, "Fractal", bgcolor = color.fuchsia, text_color = color.white)
    table.cell(panel, 1, 0, "Buy Sell", bgcolor = color.fuchsia, text_color = color.white)
    table.cell(panel, 2, 0, "UpFractalHigh", bgcolor=color.fuchsia, text_color=color.white)
    table.cell(panel, 3, 0, "DownFractalLow", bgcolor=color.fuchsia, text_color=color.white)
    table.cell(panel, 0, 1, "NIFTY", bgcolor=color.fuchsia, text_color=color.white)
    table.cell(panel, 1, 1, trigger_nifty, bgcolor=color.gray, text_color=color.white)
    table.cell(panel, 2, 1, str.tostring(max_nifty_up), bgcolor=color.gray, text_color=color.white)
    table.cell(panel, 3, 1, str.tostring(min_nifty_down), bgcolor=color.gray, text_color=color.white)
    table.cell(panel, 0, 2, "NB", bgcolor=color.fuchsia, text_color=color.white)
    table.cell(panel, 1, 2, trigger_bn, bgcolor=color.gray, text_color=color.white)
    table.cell(panel, 2, 2, str.tostring(max_bn_up), bgcolor=color.gray, text_color=color.white)
    table.cell(panel, 3, 2, str.tostring(min_bn_down), bgcolor=color.gray, text_color=color.white)

