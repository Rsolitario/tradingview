// This source code is subject to the terms of the Mozilla Public License 2.0 at https://mozilla.org/MPL/2.0/
// © solitario

//@version=5
strategy(title="Over Ema20", shorttitle ="OEMA20", overlay=true)
ema20 = ta.ema(close, 20)
plot(ema20)
// plot(close - ta.atr(14), color=color.red)
// plot(close + ta.atr(14), color=color.green)
const_day= 86400000
res = input.timeframe(title="Resolution",defval="D", group="TimeFrame")
day_entry = input.int(defval=7, title="N° of bars for entry", minval=1, maxval=10)
days = input.int(10, title="N° of days for exit")
long = input.bool(true, title="Long")
short = input.bool(false, title="Short")
length_atr = input.int(14, title="Length ATR")

day_of_range_long(parm)=>
    rtn = if parm == 1
        ta.crossover(close[parm], ema20[parm])
    else if parm == 2
        ta.crossover(close[parm], ema20[parm]) and close[parm-1] > ema20[parm-1]
    else if parm == 3
        ta.crossover(close[parm], ema20[parm]) and close[parm-1] > ema20[parm-1] and close[parm-2] > ema20[parm-2]
    else if parm == 4
        ta.crossover(close[parm], ema20[parm]) and close[parm-1] > ema20[parm-1] and close[parm-2] > ema20[parm-2] and close[parm-3] > ema20[parm-3]
    else if parm == 5
        ta.crossover(close[parm], ema20[parm]) and close[parm-1] > ema20[parm-1] and close[parm-2] > ema20[parm-2] and close[parm-3] > ema20[parm-3] and close[parm-4] > ema20[parm-4]
    else if parm == 6
        ta.crossover(close[parm], ema20[parm]) and close[parm-1] > ema20[parm-1] and close[parm-2] > ema20[parm-2] and close[parm-3] > ema20[parm-3] and close[parm-4] > ema20[parm-4] and close[parm-5] > ema20[parm-5]
    else if parm == 7
        ta.crossover(close[parm], ema20[parm]) and close[parm-1] > ema20[parm-1] and close[parm-2] > ema20[parm-2] and close[parm-3] > ema20[parm-3] and close[parm-4] > ema20[parm-4] and close[parm-5] > ema20[parm-5] and close[parm-6] > ema20[parm-6]
    else if parm == 8
        ta.crossover(close[parm], ema20[parm]) and close[parm-1] > ema20[parm-1] and close[parm-2] > ema20[parm-2] and close[parm-3] > ema20[parm-3] and close[parm-4] > ema20[parm-4] and close[parm-5] > ema20[parm-5] and close[parm-6] > ema20[parm-6] and close[parm-7] > ema20[parm-7]
    else if parm == 9
        ta.crossover(close[parm], ema20[parm]) and close[parm-1] > ema20[parm-1] and close[parm-2] > ema20[parm-2] and close[parm-3] > ema20[parm-3] and close[parm-4] > ema20[parm-4] and close[parm-5] > ema20[parm-5] and close[parm-6] > ema20[parm-6] and close[parm-7] > ema20[parm-7] and close[parm-8] > ema20[parm-8]
    else if parm == 10
        ta.crossover(close[parm], ema20[parm]) and close[parm-1] > ema20[parm-1] and close[parm-2] > ema20[parm-2] and close[parm-3] > ema20[parm-3] and close[parm-4] > ema20[parm-4] and close[parm-5] > ema20[parm-5] and close[parm-6] > ema20[parm-6] and close[parm-7] > ema20[parm-7] and close[parm-8] > ema20[parm-8] and close[parm-9] > ema20[parm-9]

day_of_range_short(parm)=>
    rtn = if parm == 1
        ta.crossunder(close[parm], ema20[parm])
    else if parm == 2
        ta.crossunder(close[parm], ema20[parm]) and close[parm-1] < ema20[parm-1]
    else if parm == 3
        ta.crossunder(close[parm], ema20[parm]) and close[parm-1] < ema20[parm-1] and close[parm-2] < ema20[parm-2]
    else if parm == 4
        ta.crossunder(close[parm], ema20[parm]) and close[parm-1] < ema20[parm-1] and close[parm-2] < ema20[parm-2] and close[parm-3] < ema20[parm-3]
    else if parm == 5
        ta.crossunder(close[parm], ema20[parm]) and close[parm-1] < ema20[parm-1] and close[parm-2] < ema20[parm-2] and close[parm-3] < ema20[parm-3] and close[parm-4] < ema20[parm-4]
    else if parm == 6
        ta.crossunder(close[parm], ema20[parm]) and close[parm-1] < ema20[parm-1] and close[parm-2] < ema20[parm-2] and close[parm-3] < ema20[parm-3] and close[parm-4] < ema20[parm-4] and close[parm-5] < ema20[parm-5]
    else if parm == 7
        ta.crossunder(close[parm], ema20[parm]) and close[parm-1] < ema20[parm-1] and close[parm-2] < ema20[parm-2] and close[parm-3] < ema20[parm-3] and close[parm-4] < ema20[parm-4] and close[parm-5] < ema20[parm-5] and close[parm-6] < ema20[parm-6]
    else if parm == 8
        ta.crossunder(close[parm], ema20[parm]) and close[parm-1] < ema20[parm-1] and close[parm-2] < ema20[parm-2] and close[parm-3] < ema20[parm-3] and close[parm-4] < ema20[parm-4] and close[parm-5] < ema20[parm-5] and close[parm-6] < ema20[parm-6] and close[parm-7] < ema20[parm-7]
    else if parm == 9
        ta.crossunder(close[parm], ema20[parm]) and close[parm-1] < ema20[parm-1] and close[parm-2] < ema20[parm-2] and close[parm-3] < ema20[parm-3] and close[parm-4] < ema20[parm-4] and close[parm-5] < ema20[parm-5] and close[parm-6] < ema20[parm-6] and close[parm-7] < ema20[parm-7] and close[parm-8] < ema20[parm-8]
    else if parm == 10
        ta.crossunder(close[parm], ema20[parm]) and close[parm-1] < ema20[parm-1] and close[parm-2] < ema20[parm-2] and close[parm-3] < ema20[parm-3] and close[parm-4] < ema20[parm-4] and close[parm-5] < ema20[parm-5] and close[parm-6] < ema20[parm-6] and close[parm-7] < ema20[parm-7] and close[parm-8] < ema20[parm-8] and close[parm-9] < ema20[parm-9]


var label labelHigh = na
var stop_long = 0.0
var time_entry_long = 0.0
boolean_long = request.security(syminfo.tickerid, res, expression = day_of_range_long(day_entry))
if boolean_long == true and long
    strategy.entry(id="long", direction=strategy.long)
    time_entry_long := time_close
    stop_long := close-ta.atr(length_atr)
    // labelHigh := label.new(bar_index, high, str.tostring(time_entry_long), color = color.green)


// plot(stop_long, color=color.red)

if time_close-(const_day * days) > time_entry_long or close < stop_long
    strategy.close("long")
    
boolean_short = request.security(syminfo.tickerid, res, expression = day_of_range_short(day_entry))
var time_entry_short =0.0
var stop_short = 0.0
if boolean_short == true and short
    strategy.entry(id="short", direction=strategy.short, stop=close+ta.atr(14))
    time_entry_short := time_close
    stop_short := close+ta.atr(length_atr)
    // labelHigh := label.new(bar_index, high, str.tostring(time_entry_short), color = color.green)

// plot(stop_short, color=color.red)
if time_close-(const_day * days) > time_entry_short or close > stop_short
    strategy.close("short")
    