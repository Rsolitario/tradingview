//strategy that sends buy and sell signals to the 3commas webhook.
//@version=4
strategy("Strat with time delay", overlay=true, calc_on_every_tick=true, commission_type= strategy.commission.percent
   ,commission_value=0.11
   ,initial_capital=100
   ,default_qty_type=strategy.percent_of_equity
   ,default_qty_value=100)

var string GP2 = "Display Table"
showDisplay = input(true,"Show Display Pane", group = GP2)
string  i_tableYpos = input("top", "Display position", inline = "11", options = ["top", "middle", "bottom"], group = GP2)
string  i_tableXpos = input("right", "", inline = "11", options = ["left", "center", "right"], group = GP2)
//color   i_c_bull    = input(color.new(color.green, 30), "Bull", inline = "12", group = GP2)
//color   i_c_bear    = input(color.new(color.red, 30), "Bear", inline = "12", group = GP2)
color   i_c_neutral = input(color.new(#434651, 00), "Display Background", inline = "12", group = GP2)
c = input(title="Display Text Color", type=input.color, defval=color.white, group = GP2)
perProfitable = (strategy.wintrades/strategy.closedtrades)*100

var table panel = table.new(i_tableYpos + "_" + i_tableXpos, 2, 30, border_width = 1)
if showDisplay
    table.cell(panel, 0, 0, "PAR", bgcolor = i_c_neutral, text_color = c)
    table.cell(panel, 1, 0, syminfo.ticker, bgcolor = i_c_neutral, text_color = c)
    table.cell(panel, 0, 1, "Winners", bgcolor = i_c_neutral, text_color = c)
    table.cell(panel, 1, 1, tostring(strategy.wintrades), bgcolor = i_c_neutral, text_color = c)
    table.cell(panel, 0, 2, "Losers", bgcolor = i_c_neutral, text_color = c)
    table.cell(panel, 1, 2, tostring(strategy.losstrades), bgcolor = i_c_neutral, text_color = c)
    table.cell(panel, 0, 3, "Percent Profitable", bgcolor = i_c_neutral, text_color = c)
    table.cell(panel, 1, 3, tostring(round(perProfitable))+"%", bgcolor = i_c_neutral, text_color = c)
    table.cell(panel, 0, 4, "Initial Capital", bgcolor = i_c_neutral, text_color = c)
    table.cell(panel, 1, 4, tostring(strategy.initial_capital)+" USD", bgcolor = i_c_neutral, text_color = c)
    table.cell(panel, 0, 5, "Ending Capital", bgcolor = i_c_neutral, text_color = c)
    table.cell(panel, 1, 5,tostring(round(strategy.initial_capital+strategy.netprofit))+" USD", bgcolor = i_c_neutral, text_color = c)
    table.cell(panel, 0, 6, "Net Profit", bgcolor = i_c_neutral, text_color = c)
    table.cell(panel, 1, 6, tostring(round(strategy.netprofit))+" USD", bgcolor = i_c_neutral, text_color = c)
    table.cell(panel, 0, 7, "% Return", bgcolor = i_c_neutral, text_color = c)
    table.cell(panel, 1, 7, tostring(round((strategy.netprofit/strategy.initial_capital)*100))+" %", bgcolor = i_c_neutral, text_color = c)
    table.cell(panel, 0, 8, "Gross Profit", bgcolor = i_c_neutral, text_color = c)
    table.cell(panel, 1, 8, tostring(round(strategy.grossprofit))+" USD", bgcolor = i_c_neutral, text_color = c)
    table.cell(panel, 0, 9, "Gross Loss", bgcolor = i_c_neutral, text_color = c)
    table.cell(panel, 1, 9, tostring(round(strategy.grossloss))+" USD", bgcolor = i_c_neutral, text_color = c)
    table.cell(panel, 0, 10, "Max Drawdown", bgcolor = i_c_neutral, text_color = c)
    table.cell(panel, 1, 10, tostring(round(strategy.max_drawdown))+" USD", bgcolor = i_c_neutral, text_color = c)
    table.cell(panel, 0, 11, "Number of Trades", bgcolor = i_c_neutral, text_color = c)
    table.cell(panel, 1, 11, tostring(round(strategy.closedtrades)), bgcolor = i_c_neutral, text_color = c)

i_qtyTimeUnits  = input(5, "Quantity", minval = 0)
i_timeUnits     = input("seconds", "Delay between entries", options = ["seconds", "minutes", "hours", "days", "months", "years"])


int _timeFrom_ = na        
_year_   =  (i_timeUnits == "year"   ? int(i_qtyTimeUnits) : 0)
_month_  =(i_timeUnits == "month"  ? int(i_qtyTimeUnits) : 0)
_day_   =  (i_timeUnits == "day"    ? int(i_qtyTimeUnits) : 0)
_hour_   = (i_timeUnits == "hour"   ? int(i_qtyTimeUnits) : 0)
_minute_ =  (i_timeUnits == "minute" ? int(i_qtyTimeUnits) : 0)
_second_ =  (i_timeUnits == "second"  ? int(i_qtyTimeUnits) : 0)
// Return the resulting time in ms Unix time format.
_timeFrom_ := timestamp(_year_, _month_, _day_, _hour_, _minute_, _second_)
// Entry conditions.
ma = ema(close, 5)//sma(close, 5)
goLong = crossover(close, ma)
goShort = crossunder(close , ma)

timeLeft = (time_close - timenow) / 1000 
vol=label.new(bar_index, na,text=tostring(timeLeft), color=color.red,style=label.style_labeldown, yloc=yloc.abovebar)
label.delete(vol[1])

if_t=timeLeft<=i_qtyTimeUnits?1:0

vol1=label.new(bar_index[10], na,text=tostring(i_qtyTimeUnits)+'\n '+tostring(if_t), color=color.lime,style=label.style_labelup, yloc=yloc.abovebar)
label.delete(vol1[1])


if goLong and timeLeft<=i_qtyTimeUnits
    strategy.entry("Long", strategy.long, comment="Long_m", alert_message= "Long")
    
//if goShort and timeLeft<=i_qtyTimeUnits
    //strategy.entry("Short", strategy.short, comment="Short_m", alert_message="Short")
    
strategy.close("Long", comment="Short_m", alert_message="Short", when=goShort and timeLeft<=i_qtyTimeUnits)

plot(ma, "MA", goLong ? color.lime : color.red)



exchange='3commas Settings'
bot_id = input(7249165, title="bot ID", type=input.integer,group=exchange)
email_token = input("61d1fb0f-ee23-4a0a-9170-5f43e2a07cc9", title="email token", type=input.string, group=exchange)

if goLong and timeLeft<=i_qtyTimeUnits
    alert("{\n\"message_type\":\"bot\",\n\"bot_id\":" + tostring(bot_id) + ",\n\"email_token\": \"" + email_token + "\",\n\"delay_seconds\": 0\n}", alert.freq_once_per_bar)
if goShort and timeLeft<=i_qtyTimeUnits
    alert("{\n\"action\":\"close_at_market_price\",\n\"message_type\": \"bot\",\n\"bot_id\":" + tostring(bot_id) + ",\n\"email_token\": \"" + email_token + "\",\n\"delay_seconds\": 0\n}", alert.freq_once_per_bar)